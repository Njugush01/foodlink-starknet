import React, { useEffect, useState } from "react";
import axiosClient from "../axios-client";
import { jsPDF } from "jspdf";
import "jspdf-autotable";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import TButton from "../core/TButton";
import companyLogo from "../assets/pdflogo.png";
import { useStateContext } from "../contexts/ContextProvider";

export default function RejectedListingsListings() {
  const [rejectedListings, setRejectedListings] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const { user } = useStateContext();

  useEffect(() => {
    getRejectedListings();
  }, [selectedDate]);

  const getRejectedListings = () => {
    setLoading(true);
    axiosClient
      .get("/auth/rejected")
      .then(({ data }) => {
        setLoading(false);
        setRejectedListings(data);
      })
      .catch(() => {
        setLoading(false);
      });
  };

  const handlePDFDownload = () => {
    const doc = new jsPDF();

    // Add company logo
    const logoImg = new Image();
    logoImg.src = companyLogo;
    doc.addImage(logoImg, "PNG", 15, 10, 30, 30); // Adjust coordinates and size as needed

    // Add title
    let titleText = selectedDate
      ? `Total rejected listings for the month of ${selectedDate.toLocaleString(
          "default",
          { month: "long" }
        )}`
      : "Total rejected listings";
    doc.setFontSize(20);
    doc.text(titleText, doc.internal.pageSize.width / 2, 45, {
      align: "center",
    });

    // Add current date
    const currentDate = new Date().toLocaleDateString();
    doc.setFontSize(10);
    doc.text(currentDate, doc.internal.pageSize.width - 15, 15, {
      align: "right",
    });

    // Add user information
    const footerText = `Generated by: ${user.name}`;
    const footerHeight = 10;
    const footerX = 10;
    const footerY = doc.internal.pageSize.height - footerHeight;

    doc.setFontSize(8);
    doc.text(footerText, footerX, footerY);

    const additionalSentence =
      "Nourishing Communities, One Donation at a Time.";
    const textWidth =
      (doc.getStringUnitWidth(additionalSentence) *
        doc.internal.getFontSize()) /
      doc.internal.scaleFactor;
    const centerX = (doc.internal.pageSize.getWidth() - textWidth) / 2;
    const textY = doc.internal.pageSize.getHeight() - footerHeight - 20; // Margin from bottom
    doc.text(additionalSentence, centerX, textY);

    // Generate table data
    const tableData = rejectedListings.map((listing) => [
      listing.id,
      listing.title,
      listing.description,
      listing.quantity,
      listing.expiry_date,
      listing.location,
      listing.created_at,
    ]);

    // Add table
    doc.autoTable({
      head: [
        [
          "ID",
          "Category",
          "Description",
          "Quantity",
          "Expiry Date",
          "Location",
          "Create Date",
        ],
      ],
      body: tableData,
      startY: 55,
    });

    doc.save("rejected_listings.pdf");
  };

  return (
    <div>
      <h1 className="font-bold text-2xl">Rejected Listings</h1>
      <div className="flex justify-between mb-4">
        <div>
          <label className="mr-2">Select Month:</label>
          <DatePicker
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            dateFormat="MMMM yyyy"
            showMonthYearPicker
            className="border rounded-md px-3 py-1"
          />
        </div>
        <TButton onClick={handlePDFDownload}>Download PDF</TButton>
      </div>

      {loading && <p>Loading...</p>}
      {!loading && rejectedListings && rejectedListings.length > 0 && (
        <div>
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Category</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Expiry Date</th>
                <th>Location</th>
                <th>Create Date</th>
              </tr>
            </thead>
            <tbody>
              {rejectedListings
                .filter(
                  (listing) =>
                    !selectedDate ||
                    (new Date(listing.created_at).getFullYear() ===
                      selectedDate.getFullYear() &&
                      new Date(listing.created_at).getMonth() ===
                        selectedDate.getMonth())
                )
                .map((listing) => (
                  <tr key={listing.id}>
                    <td>{listing.id}</td>
                    <td>{listing.title}</td>
                    <td>{listing.description}</td>
                    <td>{listing.quantity}</td>
                    <td>{listing.expiry_date}</td>
                    <td>{listing.location}</td>
                    <td>{listing.created_at}</td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      )}
      {selectedDate &&
        rejectedListings.every(
          (listing) =>
            new Date(listing.created_at).getFullYear() !==
              selectedDate.getFullYear() ||
            new Date(listing.created_at).getMonth() !== selectedDate.getMonth()
        ) && <p>No rejected listings available for selected month</p>}
    </div>
  );
}
